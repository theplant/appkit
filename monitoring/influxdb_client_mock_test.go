// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package monitoring

import (
	"github.com/influxdata/influxdb1-client/v2"
	"sync"
	"time"
)

var (
	lockClientMockClose        sync.RWMutex
	lockClientMockPing         sync.RWMutex
	lockClientMockQuery        sync.RWMutex
	lockClientMockQueryAsChunk sync.RWMutex
	lockClientMockWrite        sync.RWMutex
)

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             CloseFunc: func() error {
// 	               panic("TODO: mock out the Close method")
//             },
//             PingFunc: func(timeout time.Duration) (time.Duration, string, error) {
// 	               panic("TODO: mock out the Ping method")
//             },
//             QueryFunc: func(q client.Query) (*client.Response, error) {
// 	               panic("TODO: mock out the Query method")
//             },
//             QueryAsChunkFunc: func(q client.Query) (*client.ChunkedResponse, error) {
// 	               panic("TODO: mock out the QueryAsChunk method")
//             },
//             WriteFunc: func(bp client.BatchPoints) error {
// 	               panic("TODO: mock out the Write method")
//             },
//         }
//
//         // TODO: use mockedClient in code that requires Client
//         //       and then make assertions.
//
//     }
type ClientMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// PingFunc mocks the Ping method.
	PingFunc func(timeout time.Duration) (time.Duration, string, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(q client.Query) (*client.Response, error)

	// QueryAsChunkFunc mocks the QueryAsChunk method.
	QueryAsChunkFunc func(q client.Query) (*client.ChunkedResponse, error)

	// WriteFunc mocks the Write method.
	WriteFunc func(bp client.BatchPoints) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Timeout is the timeout argument value.
			Timeout time.Duration
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Q is the q argument value.
			Q client.Query
		}
		// QueryAsChunk holds details about calls to the QueryAsChunk method.
		QueryAsChunk []struct {
			// Q is the q argument value.
			Q client.Query
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// Bp is the bp argument value.
			Bp client.BatchPoints
		}
	}
}

// Close calls CloseFunc.
func (mock *ClientMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ClientMock.CloseFunc: method is nil but Client.Close was just called")
	}
	callInfo := struct {
	}{}
	lockClientMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockClientMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedClient.CloseCalls())
func (mock *ClientMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockClientMockClose.RLock()
	calls = mock.calls.Close
	lockClientMockClose.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *ClientMock) Ping(timeout time.Duration) (time.Duration, string, error) {
	if mock.PingFunc == nil {
		panic("ClientMock.PingFunc: method is nil but Client.Ping was just called")
	}
	callInfo := struct {
		Timeout time.Duration
	}{
		Timeout: timeout,
	}
	lockClientMockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	lockClientMockPing.Unlock()
	return mock.PingFunc(timeout)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedClient.PingCalls())
func (mock *ClientMock) PingCalls() []struct {
	Timeout time.Duration
} {
	var calls []struct {
		Timeout time.Duration
	}
	lockClientMockPing.RLock()
	calls = mock.calls.Ping
	lockClientMockPing.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *ClientMock) Query(q client.Query) (*client.Response, error) {
	if mock.QueryFunc == nil {
		panic("ClientMock.QueryFunc: method is nil but Client.Query was just called")
	}
	callInfo := struct {
		Q client.Query
	}{
		Q: q,
	}
	lockClientMockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	lockClientMockQuery.Unlock()
	return mock.QueryFunc(q)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//     len(mockedClient.QueryCalls())
func (mock *ClientMock) QueryCalls() []struct {
	Q client.Query
} {
	var calls []struct {
		Q client.Query
	}
	lockClientMockQuery.RLock()
	calls = mock.calls.Query
	lockClientMockQuery.RUnlock()
	return calls
}

// QueryAsChunk calls QueryAsChunkFunc.
func (mock *ClientMock) QueryAsChunk(q client.Query) (*client.ChunkedResponse, error) {
	if mock.QueryAsChunkFunc == nil {
		panic("ClientMock.QueryAsChunkFunc: method is nil but Client.QueryAsChunk was just called")
	}
	callInfo := struct {
		Q client.Query
	}{
		Q: q,
	}
	lockClientMockQueryAsChunk.Lock()
	mock.calls.QueryAsChunk = append(mock.calls.QueryAsChunk, callInfo)
	lockClientMockQueryAsChunk.Unlock()
	return mock.QueryAsChunkFunc(q)
}

// QueryAsChunkCalls gets all the calls that were made to QueryAsChunk.
// Check the length with:
//     len(mockedClient.QueryAsChunkCalls())
func (mock *ClientMock) QueryAsChunkCalls() []struct {
	Q client.Query
} {
	var calls []struct {
		Q client.Query
	}
	lockClientMockQueryAsChunk.RLock()
	calls = mock.calls.QueryAsChunk
	lockClientMockQueryAsChunk.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *ClientMock) Write(bp client.BatchPoints) error {
	if mock.WriteFunc == nil {
		panic("ClientMock.WriteFunc: method is nil but Client.Write was just called")
	}
	callInfo := struct {
		Bp client.BatchPoints
	}{
		Bp: bp,
	}
	lockClientMockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	lockClientMockWrite.Unlock()
	return mock.WriteFunc(bp)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedClient.WriteCalls())
func (mock *ClientMock) WriteCalls() []struct {
	Bp client.BatchPoints
} {
	var calls []struct {
		Bp client.BatchPoints
	}
	lockClientMockWrite.RLock()
	calls = mock.calls.Write
	lockClientMockWrite.RUnlock()
	return calls
}
