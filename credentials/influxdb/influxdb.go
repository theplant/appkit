package influxdb

import (
	"fmt"
	neturl "net/url"

	"github.com/hashicorp/vault/api"
	"github.com/pkg/errors"
	"github.com/theplant/appkit/log"
	"github.com/theplant/appkit/monitoring"
)

func InfluxMonitorConfig(l log.Logger, serviceName string, vault *api.Client, url string) (monitoring.InfluxMonitorConfig, error) {
	u, err := neturl.Parse(url)
	if err != nil {
		return monitoring.InfluxMonitorConfig(url), nil
	}

	// Direct: https://<username>:<pw>@<host>:<port>/<db>?service-name=<service_name>
	// Direct, stored in Vault, don't support this: vaultkv: INFLUXDB => <username>:<pw>@<host>:<port>/<db>?service-name=<service_name>
	// Generated by Vault: vault://<influxdb-host>/<database> => <username>:<pw>@<influxdb-host>/<database>?service-name=<service_name>
	if u.Scheme == "vault" {
		// u.Path[0] is '/'...
		role := "database/creds" + u.Path + "-influxdb"

		l.Debug().Log(
			"msg", "fetching influxdb credentials from vault",
			"serviceName", serviceName,
			"role", role,
		)

		u.Scheme = "https"

		// username/pw from Vault
		if vault == nil {
			return "", errors.New("no vault client")
		}
		var secret *api.Secret
		secret, err = vault.Logical().Read(role)

		fmt.Println(secret, err)

		if err != nil {
			return "", errors.Wrap(err, "error fetching credentials")
		} else if secret == nil {
			return "", errors.New("vault client returned nil secret")
		}

		u.User = neturl.UserPassword(secret.Data["username"].(string), secret.Data["password"].(string))

		// hostname from url

		// DB name from url

		// service name
		q := u.Query()
		if q.Get("service-name") == "" && serviceName != "" {
			q.Set("service-name", serviceName)
		}

		u.RawQuery = q.Encode()

		return monitoring.InfluxMonitorConfig(u.String()), nil
	}

	return monitoring.InfluxMonitorConfig(url), nil
}
